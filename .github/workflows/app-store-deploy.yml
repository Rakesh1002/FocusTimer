name: App Store Deployment

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.1, v1.1.0, etc.
  workflow_dispatch:  # Manual trigger option
    inputs:
      version:
        description: 'Version number (e.g., 1.0.1)'
        required: true
        type: string
      build_number:
        description: 'Build number (must be higher than previous)'
        required: true
        type: string

jobs:
  build-and-deploy:
    runs-on: macos-14  # Use macOS 14 for latest Xcode
    timeout-minutes: 30
    
    env:
      XCODE_VERSION: '15.2'
      APP_NAME: 'Focusly'
      BUNDLE_ID: 'unquest.focusly'
      TEAM_ID: '933FJ3W655'
      
    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Step 2: Setup Xcode version
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
      
      # Step 3: Install certificates and provisioning profiles
      - name: Install Apple Certificate
        env:
          P12_CERTIFICATE: ${{ secrets.APPLE_DIST_CERTIFICATE_P12 }}
          P12_PASSWORD: ${{ secrets.APPLE_DIST_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate
          echo "$P12_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Verify certificate
          security find-identity -v -p codesigning
      
      - name: Install Provisioning Profile
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          # Create provisioning profiles directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Decode and save provisioning profile
          echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/focusly.provisionprofile
          
          # Copy to project root for build script
          cp ~/Library/MobileDevice/Provisioning\ Profiles/focusly.provisionprofile embedded.provisionprofile
      
      # Step 4: Extract version info
      - name: Get version information
        id: version_info
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "BUILD_NUMBER=${{ github.event.inputs.build_number }}" >> $GITHUB_OUTPUT
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            # Auto-increment build number or use timestamp
            BUILD_NUMBER=$(date +%Y%m%d%H%M)
            echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          fi
          
          echo "📦 Version: $VERSION, Build: $BUILD_NUMBER"
      
      # Step 5: Update version in build script
      - name: Update version in build script
        run: |
          VERSION=${{ steps.version_info.outputs.VERSION }}
          BUILD_NUMBER=${{ steps.version_info.outputs.BUILD_NUMBER }}
          
          sed -i '' "s/<string>1.0.0<\/string>/<string>$VERSION<\/string>/g" Scripts/build_for_distribution.sh
          sed -i '' "s/<string>3<\/string>/<string>$BUILD_NUMBER<\/string>/g" Scripts/build_for_distribution.sh
      
      # Step 6: Build app
      - name: Build app for distribution
        run: |
          chmod +x Scripts/build_for_distribution.sh
          ./Scripts/build_for_distribution.sh
      
      # Step 7: Verify build
      - name: Verify build artifacts
        run: |
          echo "📂 Checking build artifacts..."
          ls -lh Distribution/
          
          if [ ! -f "Distribution/Focusly.pkg" ]; then
            echo "❌ Build failed: Focusly.pkg not found"
            exit 1
          fi
          
          echo "✅ Build artifacts verified"
          
          # Verify signature
          codesign -vvv --deep --strict Distribution/Focusly.app
          pkgutil --check-signature Distribution/Focusly.pkg
      
      # Step 8: Upload to App Store Connect
      - name: Upload to App Store Connect
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          # Create API Key file
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APP_STORE_CONNECT_API_KEY" > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          
          # Upload using altool
          xcrun altool --upload-app \
            --type macos \
            --file Distribution/Focusly.pkg \
            --apiKey $APP_STORE_CONNECT_API_KEY_ID \
            --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID \
            --verbose
      
      # Step 9: Create GitHub Release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: "Focusly v${{ steps.version_info.outputs.VERSION }}"
          body: |
            ## 🚀 Focusly v${{ steps.version_info.outputs.VERSION }} (Build ${{ steps.version_info.outputs.BUILD_NUMBER }})
            
            **Status:** ✅ Uploaded to App Store Connect
            
            This release has been automatically built and uploaded to App Store Connect for review.
            
            ### What's New
            - Check CHANGELOG.md for details
            
            ### Next Steps
            1. Wait for App Store review (1-3 business days)
            2. Monitor App Store Connect for approval
            3. Release to production when ready
          files: |
            Distribution/Focusly.pkg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 10: Cleanup
      - name: Cleanup keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true
      
      # Step 11: Notify Slack (optional)
      - name: Notify Slack
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST "$SLACK_WEBHOOK_URL" \
              -H 'Content-Type: application/json' \
              -d '{
                "text": "✅ Focusly v${{ steps.version_info.outputs.VERSION }} uploaded to App Store Connect",
                "attachments": [{
                  "color": "good",
                  "fields": [
                    {"title": "Version", "value": "${{ steps.version_info.outputs.VERSION }}", "short": true},
                    {"title": "Build", "value": "${{ steps.version_info.outputs.BUILD_NUMBER }}", "short": true},
                    {"title": "Status", "value": "Awaiting Review", "short": false}
                  ]
                }]
              }'
          fi

